from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import ADMIN_ID
from database.models.models import SessionLocal
from database.utils.users import get_user
from keyboards import back_to_menu, trade
from states import AllPath

router = Router()

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞
TRADE_OPTIONS = [
    {"name": "–£–±—Ä–∞—Ç—å –¥–∏–∑–ª–∞–π–∫", "cost": 2, "callback": "option_0"},
    {"name": "–ö—É–ø–∏—Ç—å –∫–æ—Ñ–µ", "cost": 11, "callback": "option_1"},
    {"name": "–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å (1 –º–µ—Å—è—Ü)", "cost": 25, "callback": "option_2"},
    {"name": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–∑", "cost": 50, "callback": "option_3"},
    {"name": "–û–±–µ–¥ –¥–æ 500 —Ä—É–±–ª–µ–π", "cost": 55, "callback": "option_4"},
    {"name": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –ó–Ø –∑–∞ 1000 —Ä—É–±–ª–µ–π", "cost": 75, "callback": "option_5"},
    {"name": "–¢–µ–ª–µ–≥—Ä–∞–º–º –ø—Ä–µ–º–∏—É–º (3 –º–µ—Å—è—Ü–∞)", "cost": 100, "callback": "option_6"},
]

@router.callback_query(F.data == "trade")
async def show_trade_options(callback: types.CallbackQuery):
    """Show trade options to the user."""
    builder = InlineKeyboardBuilder()
    for index, option in enumerate(TRADE_OPTIONS):
        builder.row(types.InlineKeyboardButton(
            text=f"{option['name']} {option['cost']}üî•",
            callback_data=option['callback']
        ))
    builder.row(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back"
    ))

    with SessionLocal() as db:
        user = get_user(db, callback.from_user.id)
        await callback.message.delete()
        await callback.message.answer(
            f"–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user.balance}üî•",
            reply_markup=builder.as_markup(),
        )

@router.callback_query(F.data.startswith("option_"))
async def confirm_trade_option(callback: types.CallbackQuery):
    """Ask the user to confirm the selected trade option."""
    option_index = int(callback.data.split("_")[1])
    option = TRADE_OPTIONS[option_index]

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="–î–∞", callback_data=f"confirm_purchase_{option_index}"
    ))
    builder.row(types.InlineKeyboardButton(
        text="–ù–µ—Ç", callback_data="cancel_purchase"
    ))

    await callback.message.delete()
    await callback.message.answer(
        f"–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å: {option['name']}\n–¶–µ–Ω–∞: {option['cost']}üî•\n–¢—ã —É–≤–µ—Ä–µ–Ω/–∞ –≤ —Å–≤–æ–µ–º –≤—ã–±–æ—Ä–µ?",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("confirm_purchase_"))
async def process_purchase(callback: types.CallbackQuery):
    """Process the purchase of a trade option."""
    option_index = int(callback.data.split("_")[2])
    option = TRADE_OPTIONS[option_index]

    with SessionLocal() as db:
        user = get_user(db, callback.from_user.id)
        if user.balance >= option['cost']:
            user.balance -= option['cost']
            if option_index == 0:  # –£–±—Ä–∞—Ç—å –¥–∏–∑–ª–∞–π–∫
                if user.dislikes > 0:
                    user.dislikes -= 1
                else:
                    await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–∏–∑–ª–∞–π–∫–æ–≤.")
                    return
            db.commit()
            await callback.message.delete()
            await callback.message.answer(
                f"–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}üî•",
                reply_markup=back_to_menu().as_markup()
            )
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await callback.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"{user.name} –æ–±–º–µ–Ω—è–ª {option['name']} –∑–∞ {option['cost']}üî•"
            )
        else:
            await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.")

@router.callback_query(F.data.startswith("back"))
async def cmd_back(callback: types.CallbackQuery, state: FSMContext):
    """Handle the back to profile callback."""
    with SessionLocal() as db:
        existing_user = get_user(db, callback.from_user.id)
        if existing_user:
            await callback.message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {existing_user.name}!\n"
                f"–¢–≤–æ–π –≥—Ä–µ–π–¥: {existing_user.grade}\n"
                f"–£ —Ç–µ–±—è: üî•{existing_user.balance}!\n"
                f"–ê —Ç–∞–∫–∂–µ {existing_user.dislikes}üëé",
                reply_markup=trade(callback.message.chat.id).as_markup())
        else:
            await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            await state.set_state(AllPath.registration)

@router.callback_query(F.data == "cancel_purchase")
async def cancel_purchase(callback: types.CallbackQuery):
    """Cancel the purchase and return to the trade menu."""
    await callback.message.delete()
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=back_to_menu().as_markup())