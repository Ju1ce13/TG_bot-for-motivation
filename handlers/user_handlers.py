from aiogram import Router, types, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext

from database.models.models import SessionLocal
from database.utils.users import get_user, create_user
from keyboards import trade
from states import AllPath

router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    with SessionLocal() as db:
        existing_user = get_user(db, message.from_user.id)
        if existing_user:
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {existing_user.name}!\n"
                f"–¢–≤–æ–π –≥—Ä–µ–π–¥: {existing_user.grade}\n"
                f"–£ —Ç–µ–±—è: üî•{existing_user.balance}!\n"
                f"–ê —Ç–∞–∫–∂–µ {existing_user.dislikes}üëé",
                reply_markup=trade(message.chat.id).as_markup())
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            await state.set_state(AllPath.registration)

@router.message(StateFilter(AllPath.registration), F.text)
async def cmd_start(message: types.Message, state: FSMContext):
    with SessionLocal() as db:
        new_user = create_user(db, message.text, message.from_user.id)
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {message.text}")
    await message.delete()
    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_user.name}!\n"
        f"–¢–≤–æ–π –≥—Ä–µ–π–¥: {new_user.grade}\n"
        f"–£ —Ç–µ–±—è: üî•{new_user.balance}!\n"
        f"–ê —Ç–∞–∫–∂–µ {new_user.dislikes}üëé",
        reply_markup=trade(message.chat.id).as_markup())
    await state.set_state(AllPath.choosing_option)